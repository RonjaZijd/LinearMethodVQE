import numpy as np
from scipy import linalg as ln
import scipy as sp
import re

np.set_printoptions(suppress=True, precision=3, formatter={'float_kind':'{:0.3f}'.format})
np.random.seed(73)
#########################Setting up
size = 13
A = np.random.normal(0, 1000, (size,size))
B = np.random.normal(0, 1000, (size,size))
matrixA = (A + A.T)/2 ##this makes the matrices symmetric
matrixB = (B + B.T)/2

#########################Making B positive definite
eigvaly_B, eigvecy_B = np.linalg.eigh(matrixB)
additi = np.abs(np.min(np.array(eigvaly_B)))
matrixB += np.eye(size)*(additi+0.00001)

###Two real example matrices from the linear method algorightm (does converge!)
matrixA = np.array([[(-0.488078069710854+0j), (4.101831162461834e-17+0j), (0.008328317663462589+0j), (-0.0011580240992767037+0j), (2.4036015716218865e-17+0j), (-0.019526315646569575+0j), (0.0012580794687036306+0j), (-1.8744978089080575e-17+0j), (-0.20734166303565107+0j), (-0.022248741010030562+0j), (-5.010843098653508e-17+0j), (-0.1730385364806186+0j), (0.0005691817008939489+0j)], [(4.101831162461834e-17+0j), (0.9341727942309859-4.0548506457425465e-21j), (0.0015793221458861406-9.490934308074956e-05j), (-0.06460413049771041-0.00030527074819384803j), (-0.06582720576901413+4.0548506457425465e-21j), (-0.0010455985552442306-0.002588958096547792j), (-0.06301675041020022-0.00026526650311799833j), (-0.06582720576901413+4.0548506457425465e-21j), (0.013858506587277884+0.015218225436929527j), (-0.05257978302444677+0.010908509156734863j), (-0.06582720576901413+4.0548506457425465e-21j), (3.7681486562767264e-05+0.012459222522830988j), (-0.06626296075682604+1.2392614868744156e-05j)], [(0.008328317663462589+0j), (0.0015793221458861406+9.490934308074956e-05j), (1.0011356371343836-5.273483038067836e-20j), (0.001549538063676904-0.00012639040015221322j), (0.0015793221458861402+9.490934308075002e-05j), (0.0051181147150211655-0.015304504108061508j), (0.005410377729636118+0.0013902608795466854j), (0.0015793221458861402+9.490934308075002e-05j), (0.005135523791135666-0.005202456132121342j), (0.005069129325190986+0.004100886449952879j), (0.0015793221458861402+9.490934308075002e-05j), (-0.0023538930715386545+0.0027942806901654384j), (0.000572490566454741-0.0006845140655666036j)], [(-0.0011580240992767037+0j), (-0.06460413049771041+0.00030527074819384803j), (0.001549538063676904+0.00012639040015221322j), (0.9366386545990044+2.598107876572359e-20j), (-0.06460413049771041+0.0003052707481938467j), (0.0019323623537330229-0.0015508415517687779j), (-0.062097058313387715+0.0007855202418132743j), (-0.06460413049771041+0.0003052707481938467j), (0.014602746626884327+0.015923885340134253j), (-0.05238086230005434+0.011682611496445972j), (-0.06460413049771041+0.0003052707481938467j), (-0.000503141972203291+0.011769267525468067j), (-0.06488101116709949+0.00012281690123095936j)], [(2.4036015716218865e-17+0j), (-0.06582720576901413-4.0548506457425465e-21j), (0.0015793221458861402-9.490934308075002e-05j), (-0.06460413049771041-0.0003052707481938467j), (0.9341727942309859-4.0548506457425465e-21j), 
(-0.0010455985552442306-0.002588958096547792j), (-0.06301675041020022-0.00026526650311799833j), (-0.06582720576901413+4.0548506457425465e-21j), (0.013858506587277884+0.015218225436929527j), (-0.05257978302444677+0.010908509156734863j), (-0.06582720576901413+4.0548506457425465e-21j), (3.7681486562767264e-05+0.012459222522830988j), (-0.06626296075682604+1.2392614868744156e-05j)], [(-0.019526315646569575+0j), (-0.0010455985552442306+0.002588958096547792j), (0.0051181147150211655+0.015304504108061508j), (0.0019323623537330229+0.0015508415517687779j), (-0.0010455985552442306+0.002588958096547792j), (0.8751683835017953+5.973112866275396e-19j), (-0.0010113901428491217-0.02916530396393378j), (-0.0010455985552442304+0.002588958096547792j), (0.01649583912310101+0.0005470101404582605j), (-0.001075476251578794+0.01458126572418661j), (-0.0010455985552442304+0.002588958096547792j), (0.0008272057390887532-5.661197468601089e-05j), (-0.0009688159686065345+0.0027169903772229853j)], [(0.0012580794687036306+0j), (-0.06301675041020022+0.00026526650311799833j), (0.005410377729636118-0.0013902608795466854j), (-0.062097058313387715-0.0007855202418132743j), (-0.06301675041020022+0.00026526650311799833j), (-0.0010113901428491217+0.02916530396393378j), (0.9316457563606217-6.296440983005262e-20j), (-0.06301675041020022+0.00026526650311799725j), (0.013543879104542298+0.010535371900749402j), (-0.04716031085454579+0.01082446642832262j), (-0.06301675041020022+0.00026526650311799725j), (2.2086319268610205e-05+0.011841738697215136j), (-0.06340576742055211+0.0002577740676167516j)], [(-1.8744978089080575e-17+0j), (-0.06582720576901413-4.0548506457425465e-21j), (0.0015793221458861402-9.490934308075002e-05j), (-0.06460413049771041-0.0003052707481938467j), (-0.06582720576901413-4.0548506457425465e-21j), (-0.0010455985552442304-0.002588958096547792j), (-0.06301675041020022-0.00026526650311799725j), (0.9341727942309859-4.0548506457425465e-21j), (0.013858506587277884+0.015218225436929527j), (-0.05257978302444677+0.010908509156734863j), (-0.06582720576901413+4.0548506457425465e-21j), (3.7681486562767264e-05+0.012459222522830988j), (-0.06626296075682604+1.2392614868744156e-05j)], [(-0.20734166303565107+0j), (0.013858506587277884-0.015218225436929527j), (0.005135523791135666+0.005202456132121342j), (0.014602746626884327-0.015923885340134253j), (0.013858506587277884-0.015218225436929527j), (0.01649583912310101-0.0005470101404582605j), (0.013543879104542298-0.010535371900749402j), (0.013858506587277884-0.015218225436929527j), (0.8987152973840029+3.178389495524958e-19j), (0.008547668267256054-0.08911100491222075j), (0.013858506587277884-0.015218225436929524j), (-0.0032901546167063062-0.002292279009228447j), (0.013841471294322403-0.015453731645000397j)], [(-0.022248741010030562+0j), (-0.05257978302444677-0.010908509156734863j), (0.005069129325190986-0.004100886449952879j), (-0.05238086230005434-0.011682611496445972j), (-0.05257978302444677-0.010908509156734863j), (-0.001075476251578794-0.01458126572418661j), (-0.04716031085454579-0.01082446642832262j), (-0.05257978302444677-0.010908509156734863j), (0.008547668267256054+0.08911100491222075j), (0.8974274214212217-2.4119275061681332e-21j), (-0.05257978302444677-0.010908509156734863j), (-0.0017810907372705846+0.010274410295205316j), (-0.05303392363975702-0.010887456555704798j)], [(-5.010843098653508e-17+0j), (-0.06582720576901413-4.0548506457425465e-21j), (0.0015793221458861402-9.490934308075002e-05j), (-0.06460413049771041-0.0003052707481938467j), (-0.06582720576901413-4.0548506457425465e-21j), (-0.0010455985552442304-0.002588958096547792j), (-0.06301675041020022-0.00026526650311799725j), (-0.06582720576901413-4.0548506457425465e-21j), (0.013858506587277884+0.015218225436929524j), (-0.05257978302444677+0.010908509156734863j), (0.9341727942309859-4.0548506457425465e-21j), (3.7681486562767264e-05+0.012459222522830988j), (-0.06626296075682604+1.2392614868744156e-05j)], [(-0.1730385364806186+0j), (3.7681486562767264e-05-0.012459222522830988j), (-0.0023538930715386545-0.0027942806901654384j), (-0.000503141972203291-0.011769267525468067j), (3.7681486562767264e-05-0.012459222522830988j), (0.0008272057390887532+5.661197468601089e-05j), (2.2086319268610205e-05-0.011841738697215136j), (3.7681486562767264e-05-0.012459222522830988j), (-0.0032901546167063062+0.002292279009228447j), (-0.0017810907372705846-0.010274410295205316j), (3.7681486562767264e-05-0.012459222522830988j), (1.004288006997907-2.0807972778648302e-19j), (3.558535550328237e-05-0.01035591424557758j)], [(0.0005691817008939489+0j), (-0.06626296075682604-1.2392614868744156e-05j), (0.000572490566454741+0.0006845140655666036j), (-0.06488101116709949-0.00012281690123095936j), (-0.06626296075682604-1.2392614868744156e-05j), (-0.0009688159686065345-0.0027169903772229853j), (-0.06340576742055211-0.0002577740676167516j), (-0.06626296075682604-1.2392614868744156e-05j), (0.013841471294322403+0.015453731645000397j), (-0.05303392363975702+0.010887456555704798j), (-0.06626296075682604-1.2392614868744156e-05j), (3.558535550328237e-05+0.01035591424557758j), (0.9340172562473265-6.3956763664352616e-21j)]], dtype=complex)
matrixB = np.array([[(1+0j), 0j, 0j, 0j, 0j, 0j, 0j, 0j, 0j, 0j, 0j, 0j, 0j], [0j, (0.25999999999999995+0j), 0j, (0.24528530605886545+0j), (0.25+0j), 0j, (0.2418208541357643+0j), (0.25+0j), 0j, (0.1541953350713636+0j), (0.25+0j), 0j, (0.23609309736232564+0j)], [0j, 0j, (0.25999999999999995+0j), -0.04832306521329805j, (1.3010426069826053e-18+7.589415207398531e-19j), 0j, (1.8431436932253575e-18-5.204170427930421e-18j), (1.3010426069826053e-18+7.589415207398531e-19j), 0j, (6.505213034913027e-19+3.4626706883755798e-18j), (1.3010426069826053e-18+7.589415207398531e-19j), 0j, (2.656295322589486e-18+1.0842021724855044e-18j)], [0j, (0.24528530605886545+0j), 0.04832306521329805j, (0.25999999999999995+0j), (0.24528530605886553+0j), 0j, (0.23726040887242889+0j), (0.24528530605886553+0j), 0j, (0.15128739982331496+0j), (0.24528530605886553+0j), 0j, (0.23164067057961435+0j)], [0j, (0.25+0j), (1.3010426069826053e-18-7.589415207398531e-19j), (0.24528530605886553+0j), (0.25999999999999995+0j), 
0j, (0.24182085413576426+0j), (0.24999999999999994+0j), 0j, (0.15419533507136354+0j), (0.24999999999999994+0j), 0j, (0.23609309736232562+0j)], [0j, 0j, 0j, 0j, 0j, (0.25999999999999995+0j), 0.06342455758654847j, (-3.469446951953614e-18+0j), 0j, (-2.168404344971009e-18-1.734723475976807e-18j), (-3.469446951953614e-18+0j), 0j, (-1.734723475976807e-18+7.589415207398531e-19j)], [0j, (0.2418208541357643+0j), (1.8431436932253575e-18+5.204170427930421e-18j), (0.23726040887242889+0j), (0.24182085413576426+0j), -0.06342455758654847j, (0.25999999999999995+0j), (0.24182085413576423+0j), 0j, (0.14915059052283003+0j), (0.24182085413576423+0j), 0j, (0.22836893783886295+0j)], [0j, (0.25+0j), (1.3010426069826053e-18-7.589415207398531e-19j), (0.24528530605886553+0j), (0.24999999999999994+0j), (-3.469446951953614e-18+0j), (0.24182085413576423+0j), (0.25999999999999995+0j), 0j, (0.15419533507136357+0j), (0.24999999999999992+0j), 0j, (0.23609309736232562+0j)], [0j, 0j, 0j, 0j, 
0j, 0j, 0j, 0j, (0.2599999999999999+0j), 0.1967836340812667j, -1.0408340855860843e-17j, 0j, (-2.0816681711721685e-17-6.938893903907228e-18j)], [0j, (0.1541953350713636+0j), (6.505213034913027e-19-3.4626706883755798e-18j), (0.15128739982331496+0j), (0.15419533507136354+0j), (-2.168404344971009e-18+1.734723475976807e-18j), (0.14915059052283003+0j), (0.15419533507136357+0j), -0.1967836340812667j, (0.2599999999999999+0j), (0.15419533507136357+0j), 0j, (0.14561781702327947+0j)], [0j, (0.25+0j), (1.3010426069826053e-18-7.589415207398531e-19j), (0.24528530605886553+0j), (0.24999999999999994+0j), (-3.469446951953614e-18+0j), (0.24182085413576423+0j), (0.24999999999999992+0j), 1.0408340855860843e-17j, (0.15419533507136357+0j), (0.25999999999999995+0j), 0j, (0.23609309736232567+0j)], [0j, 0j, 0j, 0j, 0j, 0j, 0j, 0j, 0j, 0j, 0j, (0.26+0j), (-6.938893903907228e-18+0.08221951944558806j)], [0j, (0.23609309736232564+0j), (2.656295322589486e-18-1.0842021724855044e-18j), (0.23164067057961435+0j), (0.23609309736232562+0j), (-1.734723475976807e-18-7.589415207398531e-19j), (0.22836893783886295+0j), (0.23609309736232562+0j), (-2.0816681711721685e-17+6.938893903907228e-18j), (0.14561781702327947+0j), (0.23609309736232567+0j), (-6.938893903907228e-18-0.08221951944558806j), (0.26000000000000006+0j)]], dtype=complex)

###Two real examples where scipy doesn't converge: 
matrixA = np.array([[(0.3800045155705857+0j), (-3.951599281354443e-17+0j), (-0.05731411198578237+0j), (-0.0010683593522663507+0j), (-3.1279417964664015e-17+0j), (-0.02700219736258669+0j), (-0.00041668402456893506+0j), (-1.2576612851933843e-17+0j), (-0.009412431327256252+0j), (-0.0009712230770126852+0j), (-3.546407836145548e-18+0j), (0.049093190113675245+0j), (0.0003524010342597648+0j)], [(-3.951599281354443e-17+0j), (0.9029936079162788-6.696283813723393e-19j), (-0.0010390837121258454+0.026646641919704808j), (-0.012422607950684813-0.0009767419189504725j), (-0.03700639208372127+6.696283813723393e-19j), (0.001339281367042133-0.015805989999467567j), (-0.03951664473564637-0.00028402244190942224j), (-0.03700639208372127+6.696283813723393e-19j), (0.011684450119068782-0.012117019484898978j), (0.03767595583329457+0.0007119692125042877j), (-0.03700639208372127+6.696283813723393e-19j), (0.007407569099490717+0.007304400364367261j), (-0.03771054544951522+0.0016000404785299672j)], [(-0.05731411198578237+0j), (-0.0010390837121258454-0.026646641919704808j), (0.872063194297391+3.377096521208948e-19j), (0.0003544999077153361-0.05476988350769176j), (-0.001039083712125844-0.026646641919704808j), (0.014216419203354543-0.0006988375675579619j), (-0.0011636520622403759-0.029055432729001227j), (-0.001039083712125844-0.026646641919704808j), (0.008680206056843224+0.012454609023389431j), (0.0002782555986829516+0.027126040052081773j), (-0.001039083712125844-0.026646641919704808j), (-0.006851911979337892+0.0011661266988994446j), (-0.0012664385093103256-0.027497618031044963j)], [(-0.0010683593522663507+0j), (-0.012422607950684813+0.0009767419189504725j), (0.0003544999077153361+0.05476988350769176j), (0.892754309231296+8.100682870457259e-19j), (-0.012422607950684813+0.0009767419189504725j), (-0.0011138265899912252-0.007971013769605564j), (-0.013830466246317117+0.0011907353211975578j), (-0.012422607950684813+0.0009767419189504725j), (0.007721035499589447-0.004025507072098427j), (0.01264481138014047-0.0005044607296103495j), (-0.012422607950684813+0.0009767419189504725j), (-0.001431047099660388+0.003948806387985385j), (-0.012982295038446156+0.0006445769190882515j)], [(-3.1279417964664015e-17+0j), (-0.03700639208372127-6.696283813723393e-19j), (-0.001039083712125844+0.026646641919704808j), (-0.012422607950684813-0.0009767419189504725j), (0.9029936079162788-6.696283813723393e-19j), (0.001339281367042133-0.015805989999467567j), (-0.03951664473564637-0.00028402244190942224j), (-0.03700639208372127+6.696283813723393e-19j), (0.011684450119068782-0.012117019484898978j), (0.03767595583329457+0.0007119692125042877j), (-0.03700639208372127+6.696283813723393e-19j), (0.007407569099490717+0.007304400364367261j), (-0.03771054544951522+0.0016000404785299672j)], [(-0.02700219736258669+0j), (0.001339281367042133+0.015805989999467567j), (0.014216419203354543+0.0006988375675579619j), (-0.0011138265899912252+0.007971013769605564j), (0.001339281367042133+0.015805989999467567j), (1.0125197214398083+2.288844295932169e-19j), (0.0013088184872617203+6.715806929371865e-05j), (0.0013392813670421342+0.01580598999946756j), (0.006148115132607859+0.02392437923377421j), (-0.0027945782441525123-0.015401996759297586j), (0.0013392813670421342+0.01580598999946756j), (0.0038667747226402735+0.0022690258658899206j), (0.0008175539283443669+0.016268087354262314j)], [(-0.00041668402456893506+0j), (-0.03951664473564637+0.00028402244190942224j), (-0.0011636520622403759+0.029055432729001227j), (-0.013830466246317117-0.0011907353211975578j), (-0.03951664473564637+0.00028402244190942224j), (0.0013088184872617203-6.715806929371865e-05j), (0.9013679463803259-3.850373698768845e-19j), (-0.03951664473564637+0.00028402244190942224j), (0.006345017505133163-0.010537573945653737j), (0.04008530363436296+0.00010312659764741725j), (-0.03951664473564637+0.00028402244190942224j), (0.0067578847422370405+0.0079582866577339j), (-0.04030277899244758+0.0017370257505530807j)], [(-1.2576612851933843e-17+0j), (-0.03700639208372127-6.696283813723393e-19j), (-0.001039083712125844+0.026646641919704808j), (-0.012422607950684813-0.0009767419189504725j), (-0.03700639208372127-6.696283813723393e-19j), (0.0013392813670421342-0.01580598999946756j), (-0.03951664473564637-0.00028402244190942224j), (0.9029936079162788-6.696283813723393e-19j), (0.011684450119068782-0.012117019484898978j), (0.03767595583329457+0.0007119692125042877j), (-0.03700639208372127+6.696283813723393e-19j), (0.007407569099490717+0.007304400364367261j), (-0.03771054544951522+0.0016000404785299672j)], [(-0.009412431327256252+0j), (0.011684450119068782+0.012117019484898978j), (0.008680206056843224-0.012454609023389431j), (0.007721035499589447+0.004025507072098427j), (0.011684450119068782+0.012117019484898978j), (0.006148115132607859-0.02392437923377421j), (0.006345017505133163+0.010537573945653737j), (0.011684450119068782+0.012117019484898978j), (0.9177415766367701-3.752471045362248e-19j), (-0.011662738718905292-0.013450777987513242j), (0.011684450119068782+0.012117019484898973j), (0.005360619348730988+0.0073667956242442064j), (0.009817384235648867+0.012988873197092096j)], [(-0.0009712230770126852+0j), (0.03767595583329457-0.0007119692125042877j), (0.0002782555986829516-0.027126040052081773j), (0.01264481138014047+0.0005044607296103495j), (0.03767595583329457-0.0007119692125042877j), (-0.0027945782441525123+0.015401996759297586j), (0.04008530363436296-0.00010312659764741725j), (0.03767595583329457-0.0007119692125042877j), (-0.011662738718905292+0.013450777987513242j), (0.9015744545866698-9.251896151438445e-19j), (0.03767595583329457-0.0007119692125042853j), (-0.006944923419022716-0.007617466631047306j), (0.03843192548819222-0.0021952705606584763j)], [(-3.546407836145548e-18+0j), (-0.03700639208372127-6.696283813723393e-19j), (-0.001039083712125844+0.026646641919704808j), (-0.012422607950684813-0.0009767419189504725j), (-0.03700639208372127-6.696283813723393e-19j), (0.0013392813670421342-0.01580598999946756j), (-0.03951664473564637-0.00028402244190942224j), (-0.03700639208372127-6.696283813723393e-19j), (0.011684450119068782-0.012117019484898973j), (0.03767595583329457+0.0007119692125042853j), (0.9029936079162788-6.696283813723393e-19j), (0.007407569099490717+0.007304400364367261j), (-0.03771054544951522+0.0016000404785299672j)], [(0.049093190113675245+0j), (0.007407569099490717-0.007304400364367261j), (-0.006851911979337892-0.0011661266988994446j), (-0.001431047099660388-0.003948806387985385j), (0.007407569099490717-0.007304400364367261j), (0.0038667747226402735-0.0022690258658899206j), (0.0067578847422370405-0.0079582866577339j), (0.007407569099490717-0.007304400364367261j), (0.005360619348730988-0.0073667956242442064j), (-0.006944923419022716+0.007617466631047306j), (0.007407569099490717-0.007304400364367261j), (0.9204049570613158+4.2785653344346067e-19j), (0.00723270007886372-0.011364510791755794j)], [(0.0003524010342597648+0j), (-0.03771054544951522-0.0016000404785299672j), (-0.0012664385093103256+0.027497618031044963j), (-0.012982295038446156-0.0006445769190882515j), (-0.03771054544951522-0.0016000404785299672j), (0.0008175539283443669-0.016268087354262314j), (-0.04030277899244758-0.0017370257505530807j), (-0.03771054544951522-0.0016000404785299672j), (0.009817384235648867-0.012988873197092096j), (0.03843192548819222+0.0021952705606584763j), (-0.03771054544951522-0.0016000404785299672j), (0.00723270007886372+0.011364510791755794j), (0.9007249370981629-6.492168099134221e-19j)]], dtype=complex)
matrixB = np.array([[(1+0j), 0j, 0j, 0j, 0j, 0j, 0j, 0j, 0j, 0j, 0j, 0j, 0j], [0j, (0.25999999999999995+0j), 0j, 
(-0.08529146968103105+0j), (0.25+0j), 0j, (0.2443135773165252+0j), (0.25+0j), 0j, (-0.24953546380141448+0j), (0.25+0j), 0j, (0.2440982993787052+0j)], [0j, 0j, (0.26+0j), (-1.3877787807814457e-17+0.23500077701924682j), 6.938893903907228e-18j, 0j, (-3.122502256758253e-17+3.469446951953614e-17j), 6.938893903907228e-18j, 0j, (-1.734723475976807e-18-2.7755575615628914e-17j), 6.938893903907228e-18j, 0j, (-1.0408340855860843e-17+1.3877787807814457e-17j)], [0j, (-0.08529146968103105+0j), (-1.3877787807814457e-17-0.23500077701924682j), (0.26+0j), (-0.08529146968103105+0j), 0j, (-0.08335145628942656+0j), (-0.08529146968103105+0j), 0j, (0.08513298578064143+0j), (-0.08529146968103105+0j), 0j, (-0.08327801080260029+0j)], [0j, (0.25+0j), -6.938893903907228e-18j, (-0.08529146968103105+0j), (0.25999999999999995+0j), 0j, (0.2443135773165251+0j), (0.24999999999999992+0j), 0j, (-0.24953546380141436+0j), (0.24999999999999992+0j), 0j, (0.24409829937870509+0j)], [0j, 0j, 0j, 0j, 0j, (0.25999999999999995+0j), -0.053017694582113625j, (2.6020852139652106e-18+5.204170427930421e-18j), 0j, (-1.951563910473908e-18-5.204170427930421e-18j), 
(2.6020852139652106e-18+5.204170427930421e-18j), 0j, (8.673617379884035e-19+1.734723475976807e-18j)], [0j, (0.2443135773165252+0j), (-3.122502256758253e-17-3.469446951953614e-17j), (-0.08335145628942656+0j), (0.2443135773165251+0j), 0.053017694582113625j, (0.2599999999999999+0j), (0.24431357731652506+0j), 0j, (-0.24385960731464723+0j), (0.24431357731652506+0j), 0j, (0.23854611495236627+0j)], [0j, (0.25+0j), -6.938893903907228e-18j, (-0.08529146968103105+0j), (0.24999999999999992+0j), (2.6020852139652106e-18-5.204170427930421e-18j), (0.24431357731652506+0j), 
(0.25999999999999995+0j), 0j, (-0.24953546380141442+0j), (0.24999999999999992+0j), 0j, (0.24409829937870514+0j)], [0j, 0j, 0j, 0j, 0j, 0j, 0j, 0j, (0.25999999999999995+0j), 0.015233263124260486j, (-4.336808689942018e-19-1.3010426069826053e-18j), 0j, (-4.336808689942018e-19-2.6020852139652106e-18j)], [0j, (-0.24953546380141448+0j), (-1.734723475976807e-18+2.7755575615628914e-17j), (0.08513298578064143+0j), (-0.24953546380141436+0j), (-1.951563910473908e-18+5.204170427930421e-18j), (-0.24385960731464723+0j), (-0.24953546380141442+0j), -0.015233263124260486j, (0.2599999999999999+0j), (-0.24953546380141445+0j), 0j, (-0.2436447293944069+0j)], [0j, (0.25+0j), -6.938893903907228e-18j, (-0.08529146968103105+0j), (0.24999999999999992+0j), (2.6020852139652106e-18-5.204170427930421e-18j), (0.24431357731652506+0j), (0.24999999999999992+0j), (-4.336808689942018e-19+1.3010426069826053e-18j), (-0.24953546380141445+0j), (0.25999999999999995+0j), 0j, (0.2440982993787052+0j)], [0j, 0j, 0j, 0j, 0j, 0j, 0j, 0j, 0j, 0j, 0j, (0.25999999999999995+0j), 0.05400018741100823j], [0j, (0.2440982993787052+0j), (-1.0408340855860843e-17-1.3877787807814457e-17j), (-0.08327801080260029+0j), (0.24409829937870509+0j), (8.673617379884035e-19-1.734723475976807e-18j), (0.23854611495236627+0j), (0.24409829937870514+0j), (-4.336808689942018e-19+2.6020852139652106e-18j), (-0.2436447293944069+0j), (0.2440982993787052+0j), -0.05400018741100823j, (0.26+0j)]], dtype=complex)

#Checking whether matrixA and matrixB are even Hermitian: 
print(np.allclose(matrixA, np.asmatrix(matrixA).H))
print(np.allclose(matrixB, np.asmatrix(matrixB).H))

print("Eigenvalues of just matrixB: ")
eigvalyys, eigvecyys = sp.linalg.eig(matrixB)
print(eigvalyys)
eigvaly_B_after_pos_def, eigvecty_after_pos_def = np.linalg.eigh(matrixB) #can be printed as a check

eigvalsB_mat = np.zeros((size, size), dtype=np.complex128)
eigvalsB_mat_special = np.zeros((size, size), dtype = np.complex128)

###########################Start of Algorithm
eigvals_B, eigvecs_B = np.linalg.eig(matrixB)
# [D] This was too much:
#eigvecs_B = np.matrix.transpose(eigvecs_B) #to have the columns be the eigenvectors as in the paper

for i in range(size):
    for j in range(size):
        if i==j: #only along the diagonal
            eigvalsB_mat[i][j] = eigvals_B[i]
            # [D] We made B such that there will be _no_ 0 eigenvalue (because of the 0.00001)
            if eigvals_B[i] == 0: 
                eigvalsB_mat_special[i][j] = 0
            else:  
                eigvalsB_mat_special[i][j] = 1/(np.sqrt(eigvals_B[i]))

atest = np.matmul(eigvalsB_mat, eigvalsB_mat_special)
# [D] Commented this out for now
#print(np.matmul(eigvalsB_mat_special, atest))   #thus my eigvalsB_mat_special is correctly done

eigvecB_tilde = np.matmul(eigvecs_B, eigvalsB_mat_special) #we don't have to transpose B_tilde, because it's already made with the correct things
A1 = np.matmul(matrixA, eigvecB_tilde)
matrixA_tilde = np.matmul((np.matrix.transpose(eigvecB_tilde)), A1) #creating A-tilde
eigvalsA, eigvecsA = np.linalg.eig(matrixA_tilde)
# [D] This was too much:
#eigvecsA = np.matrix.transpose(eigvecsA)
final_eigvec = np.matmul(eigvecB_tilde, eigvecsA)

print()
print("The eigenvalues are: ")
print(eigvalsA)
print("The eigenvectors are: ")
# print(final_eigvec)
# [D] Print the normalized eigenvectors instead:
#print(final_eigvec/ln.norm(final_eigvec, 2, 0))
print()

print("And using scipy they would be: ")
eigvals, eigvecs = ln.eig(matrixA, matrixB)
print(eigvals)
#print(eigvecs)
print()


# [D] 
def gen_eigh(A, B):
    """Solve the generalized eigenvalue problem Av = lambda Bv."""

    # Some tests that there is no wrong inputs
    #  - Test for Hermiticity of input matrices
    assert np.allclose(B, B.T.conj()) and np.allclose(A, A.T.conj())
    #  - Test for positivity of B
    assert np.min(ln.eigvalsh(B))>0.0

    # Solve eigenvalue problem for B
    Lambda_B, Phi_B = ln.eig(B)
    # Define the modified eigenvectors of B (@ is np.matmul)
    Phi_B_tilde = Phi_B @ np.diag(Lambda_B**(-1/2))
    # Define transformed A matrix
    A_tilde = Phi_B_tilde.T @ A @ Phi_B_tilde
    # Solve eigenvalue problem for transformed A
    Lambda_A, Phi_A = ln.eig(A_tilde)
    # The eigenvalues of transformed A are the generalized eigenvalues
    Lambda = Lambda_A
    # The backtransformed eigenvectors of the transformed A are the gen. eigenvectors
    Phi = Phi_B_tilde @ Phi_A
    # Bonus: Normalize the columns (i.e. the eigenvectors) to 1
    Phi /= ln.norm(Phi, 2, axis=0)

    return Lambda, Phi

Lambda, Phi = gen_eigh(matrixA, matrixB)
print("Via new function:", Lambda)

print("Eigenvector of lowest eigenvalue: ")
print("SciPy algorithm: ")
print(eigvecs[np.argmin(eigvals)])
print("Own function: ")
print(Phi[np.argmin(Lambda)])
